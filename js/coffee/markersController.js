// Generated by CoffeeScript 1.6.3
j3r.MarkersController = (function() {
  MarkersController.emptyTitle = 'select...';

  MarkersController.wrapper = 'menu-wrapper';

  function MarkersController(markers, categories, selected) {
    this.markers = markers;
    this.categories = categories;
    this.selected = selected;
  }

  MarkersController.prototype.init = function() {
    var mainCategoryId, _i, _len, _ref;
    _ref = this.selected;
    for (_i = 0, _len = _ref.length; _i < _len; _i++) {
      mainCategoryId = _ref[_i];
      this.renderSelector(mainCategoryId);
    }
  };

  MarkersController.prototype.setSelections = function(selections) {
    var selection, wrapper, _i, _len;
    for (_i = 0, _len = selections.length; _i < _len; _i++) {
      selection = selections[_i];
      wrapper = $('#' + this.getParentId(selection));
      if (wrapper.length > 0) {
        wrapper.html('');
      }
      if (this.categories[selection] != null) {
        this.renderSelector(selection);
      }
      this.setMarkers(selection);
    }
  };

  MarkersController.prototype.renderSelector = function(categoryId) {
    var optionId, optionName, parrentId, selector, wrapper, _ref;
    parrentId = this.getParentId(categoryId);
    selector = $('<select id="' + categoryId + '" onChange="app.select($(\'#' + categoryId + '\').val())"><select>');
    selector.append('<option disabled selected>' + j3r.MarkersController.emptyTitle + '</option>');
    _ref = this.categories[categoryId];
    for (optionId in _ref) {
      optionName = _ref[optionId];
      selector.append('<option value="' + optionId + '">' + optionName + '</option>');
    }
    wrapper = $('#' + parrentId);
    if (wrapper.length === 0) {
      wrapper = $('<div id="' + parrentId + '"></div>');
      $('#menu-wrapper').append(wrapper);
    }
    wrapper.append(selector);
  };

  MarkersController.prototype.getParentId = function(categoryId) {
    var mainCatEnd, parrentId;
    mainCatEnd = categoryId.lastIndexOf('_');
    parrentId = mainCatEnd !== -1 ? 'wrapper-' + categoryId.substr(0, mainCatEnd) : j3r.MarkersController.wrapper;
    return parrentId;
  };

  MarkersController.prototype.setMarkers = function(selection) {
    var markerId, markerInfo, newMarkers, _ref;
    newMarkers = {};
    _ref = j3r.conf.markers;
    for (markerId in _ref) {
      markerInfo = _ref[markerId];
      if (markerInfo['cat'].indexOf(selection) !== -1) {
        newMarkers[markerId] = markerInfo;
      }
    }
    this.markers.setMarkers(newMarkers);
  };

  return MarkersController;

})();

j3r.MarkersController.create = function(markers, categories) {
  return new j3r.MarkersController(markers, categories, ['cat-a']);
};
