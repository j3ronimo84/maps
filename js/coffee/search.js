// Generated by CoffeeScript 1.6.3
var __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

j3r.Search = (function() {
  Search.startSearchFrom = j3r.conf['settings']['startSearchFromMinCharCount'];

  function Search(markersInfo, searchList) {
    this.markersInfo = markersInfo;
    this.searchList = searchList;
    this.search = __bind(this.search, this);
    this.wrapper = $(j3r.conf['settings']['el_searchResults']);
    this.actualList = {};
    this.actualLetters = '';
  }

  Search.prototype.search = function(key) {
    var insert, item, itemKey, keyAct, searchIn, splKey, splKeys, _i, _j, _len, _len1, _ref, _ref1;
    if (key === '' || (key.length === (j3r.Search.startSearchFrom - 1) && this.actualLetters.length === j3r.Search.startSearchFrom)) {
      this.actualLetters = '';
      this.actualList = {};
      this.renderResults();
    } else {
      if (key.length < this.actualLetters.length || key.length >= j3r.Search.startSearchFrom) {
        splKeys = key.split(' ');
        if (splKeys[splKeys.length - 1] === '') {
          splKeys.pop();
        }
        if (key.length > this.actualLetters.length && !jQuery.isEmptyObject(this.actualList)) {
          _ref = this.actualList;
          for (keyAct in _ref) {
            item = _ref[keyAct];
            for (_i = 0, _len = splKeys.length; _i < _len; _i++) {
              splKey = splKeys[_i];
              if (this.searchList[keyAct].indexOf(splKey) === -1) {
                delete this.actualList[keyAct];
                break;
              }
            }
          }
        } else {
          this.actualList = {};
          _ref1 = this.searchList;
          for (itemKey in _ref1) {
            searchIn = _ref1[itemKey];
            insert = true;
            for (_j = 0, _len1 = splKeys.length; _j < _len1; _j++) {
              splKey = splKeys[_j];
              if (searchIn.indexOf(splKey) === -1) {
                insert = false;
                break;
              }
            }
            if (insert) {
              this.actualList[itemKey] = this.getItem(itemKey);
            }
          }
        }
        this.actualLetters = key;
        this.renderResults();
      }
    }
  };

  Search.prototype.renderResults = function() {
    var item, itemKey, _ref;
    this.wrapper.empty();
    if ($.isEmptyObject(this.actualList)) {
      this.wrapper.hide();
    } else {
      this.wrapper.show();
    }
    _ref = this.actualList;
    for (itemKey in _ref) {
      item = _ref[itemKey];
      this.wrapper.append(item);
    }
  };

  Search.prototype.getItem = function(key) {
    var itemHtml, itemInfo;
    itemInfo = this.markersInfo[key];
    return itemHtml = '<a onclick="app.jumpToMarker(\'' + key + '\')"><div class="' + j3r.conf['settings']['el_searchResultItem'] + '"><strong>\
      ' + itemInfo['title'] + '</strong> (' + j3r.helpers.getCategoryInfo(key, 1) + ')</div></a>';
  };

  Search.prototype.generateListOfMarkers = function(markers) {
    var info, key, markerId, markerInfo, prohibitedKeys, text;
    prohibitedKeys = {
      'cat': true,
      'pos': true
    };
    for (markerId in markers) {
      markerInfo = markers[markerId];
      text = j3r.helpers.getAllCategoriesInfo(markerId).join('');
      for (key in markerInfo) {
        info = markerInfo[key];
        if (prohibitedKeys[key] == null) {
          text += info;
        }
      }
      text = j3r.helpers.getTransformedText(text, false);
      console.log("'" + markerId + "':'" + text + "'");
    }
  };

  return Search;

})();

j3r.Search.create = function() {
  return new j3r.Search(j3r.conf['markers'], j3r.conf['searchList']);
};

j3r.Search.callGenerateListOfMarkers = function() {
  var search;
  search = new j3r.Search({});
  search.generateListOfMarkers(j3r.conf['markers'], j3r.conf['categories']['list']);
};
