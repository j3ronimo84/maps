// Generated by CoffeeScript 1.6.3
var __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

j3r.Markers = (function() {
  function Markers(map, markersInfo, infoWindows, markersObjects, actualMarkers) {
    this.map = map;
    this.markersInfo = markersInfo;
    this.infoWindows = infoWindows;
    this.markersObjects = markersObjects != null ? markersObjects : {};
    this.actualMarkers = actualMarkers != null ? actualMarkers : {};
    this.showMarkerInfo = __bind(this.showMarkerInfo, this);
    this.getInfoWindows = __bind(this.getInfoWindows, this);
  }

  Markers.prototype.setMarkers = function(newMarkers) {
    var markerId, markerShow, _ref;
    _ref = this.actualMarkers;
    for (markerId in _ref) {
      markerShow = _ref[markerId];
      if (!newMarkers[markerId] && this.actualMarkers) {
        this.removeMarker(markerId);
      }
    }
    for (markerId in newMarkers) {
      markerShow = newMarkers[markerId];
      if ((this.actualMarkers[markerId] == null) || !this.actualMarkers[markerId]) {
        this.addMarker(markerId, this.markersInfo[markerId]);
      }
    }
  };

  Markers.prototype.getInfoWindows = function() {
    return this.infoWindows;
  };

  Markers.prototype.addMarker = function(markerId, markerInfo) {
    if (this.markersObjects[markerId] == null) {
      this.markersObjects[markerId] = this.getMarker(markerId, markerInfo);
    }
    this.markersObjects[markerId].setMap(this.map);
    this.actualMarkers[markerId] = true;
  };

  Markers.prototype.getMarker = function(markerId, markerInfo) {
    var marker, markerIcon,
      _this = this;
    markerIcon = markerInfo['cat'].indexOf('cat-a_a') === 0 ? 'pics/marker-a.png' : 'pics/marker-b.png';
    marker = new google.maps.Marker({
      position: new google.maps.LatLng(markerInfo['pos'][0], markerInfo['pos'][1]),
      map: this.map,
      title: markerInfo['title'],
      icon: markerIcon
    });
    google.maps.event.addListener(marker, 'click', function() {
      _this.showMarkerInfo(markerId, marker);
    });
    return marker;
  };

  Markers.prototype.removeMarker = function(markerId) {
    this.markersObjects[markerId].setMap(null);
    this.actualMarkers[markerId] = false;
  };

  Markers.prototype.showMarkerInfo = function(markerId, marker) {
    if (marker == null) {
      marker = null;
    }
    if ((marker == null) && (this.markersObjects[markerId] != null)) {
      marker = this.markersObjects[markerId];
    }
    if (marker != null) {
      this.infoWindows.hideAllMarkersInfoWindows();
      this.infoWindows.getInfoWindow(markerId).open(this.map, marker);
      setTimeout(function() {
        $(j3r.conf['settings']['el_markerInfoPlaceholderColorbox']).colorbox({
          rel: "gal"
        });
      }, 500);
    }
  };

  Markers.prototype.addMarkerByPos = function(pos) {
    var marker;
    console.log(pos);
    return marker = new google.maps.Marker({
      position: pos,
      map: this.map
    });
  };

  return Markers;

})();

j3r.Markers.create = function(map) {
  return new j3r.Markers(map, j3r.conf['markers'], j3r.InfoWindows.create());
};
