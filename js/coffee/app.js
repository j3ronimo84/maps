// Generated by CoffeeScript 1.6.3
var j3r;

j3r = {};

j3r.App = (function() {
  function App() {
    this.map = j3r.Map.create();
    this.markers = j3r.Markers.create(this.map.getMap());
    this.markersController = j3r.MarkersController.create(this.markers);
    this.search = j3r.Search.create();
    this.markerInfo = $(j3r.conf['settings']['el_markerInfoPlaceholder']);
    return;
  }

  App.prototype.start = function() {
    var _this = this;
    this.map.init();
    this.markers.setMarkers(j3r.conf.markers);
    this.markersController.init();
    $(document).ready(function() {
      var searchInput;
      searchInput = $(j3r.conf['settings']['el_searchInput']);
      searchInput.keyup(function() {
        _this.search.search(searchInput.val());
      });
    });
  };

  App.prototype.select = function(mainCat, selectedCat) {
    this.markersController.setSelections(mainCat, selectedCat);
  };

  App.prototype.showInfoWindow = function(markerId) {
    var content;
    content = '<span onclick="$(\'' + j3r.conf['settings']['el_markerInfoPlaceholder'] + '\').hide()" class="marker-info-close"></span>';
    content += this.markersController.markers.infoWindows.generateInfoWindowContent(markerId);
    this.markerInfo.empty();
    this.markerInfo.append(content);
    setTimeout(function() {
      $(j3r.conf['settings']['el_markerInfoPlaceholderColorbox']).colorbox({
        rel: "gal"
      });
    }, 500);
    this.markerInfo.show();
  };

  return App;

})();

j3r.helpers = {
  getCategoryInfoToString: function(selection, category, delimiter) {
    var beginPos, cat, catPos, catPosStart, end, key, nextKey, nextPos, output, parrentCat, path, pos, start, startAt, subCat, _i, _len;
    if (delimiter == null) {
      delimiter = ' - ';
    }
    catPosStart = [];
    beginPos = 0;
    while (selection.indexOf(j3r.conf['settings']['catPrefix'], beginPos) !== -1) {
      catPos = selection.indexOf(j3r.conf['settings']['catPrefix'], beginPos);
      beginPos = catPos + j3r.conf['settings']['catPrefix'].length;
      catPosStart.push(catPos);
    }
    for (key in catPosStart) {
      startAt = catPosStart[key];
      nextKey = parseInt(key) + 1;
      end = catPosStart[nextKey] != null ? catPosStart[nextKey] : selection.length;
      cat = selection.substring(startAt, end);
      if (cat.indexOf(category === 0)) {
        selection = cat;
        break;
      }
    }
    path = [];
    start = 0;
    while (selection.indexOf(j3r.conf['settings']['subCatDelimiter'], start) !== -1) {
      pos = selection.indexOf(j3r.conf['settings']['subCatDelimiter'], start);
      start = pos + 1;
      nextPos = selection.indexOf(j3r.conf['settings']['subCatDelimiter'], start) !== -1 ? selection.indexOf(j3r.conf['settings']['subCatDelimiter'], start) : selection.length;
      path.push(selection.substring(0, nextPos));
    }
    output = '';
    parrentCat = category;
    for (_i = 0, _len = path.length; _i < _len; _i++) {
      subCat = path[_i];
      if (output.length !== 0) {
        output += delimiter;
      }
      output += j3r.conf['categories']['list'][parrentCat][subCat];
      parrentCat = subCat;
    }
    return output;
  },
  getTransformedText: function(text, useSpaces) {
    var pos, toReplace, _i, _ref;
    if (useSpaces == null) {
      useSpaces = true;
    }
    text = text.toLowerCase();
    if (!useSpaces) {
      text = text.replace(/\s/g, "");
    }
    toReplace = {
      'á': 'a',
      'ä': 'a',
      'č': 'c',
      'ď': 'd',
      'é': 'e',
      'ě': 'e',
      'í': 'i',
      'ĺ': 'l',
      'ľ': 'l',
      'ň': 'n',
      'ó': 'o',
      'ô': 'o',
      'ő': 'o',
      'ö': 'o',
      'ŕ': 'r',
      'š': 's',
      'ť': 't',
      'ú': 'u',
      'ů': 'u',
      'ű': 'u',
      'ü': 'u',
      'ý': 'y',
      'ř': 'r',
      'ž': 'z'
    };
    for (pos = _i = 0, _ref = text.length; 0 <= _ref ? _i < _ref : _i > _ref; pos = 0 <= _ref ? ++_i : --_i) {
      if (toReplace[text[pos]] == null) {
        text[pos] = toReplace[text[pos]];
      }
    }
    return text;
  }
};
