// Generated by CoffeeScript 1.6.3
var j3r,
  __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

j3r = {};

j3r.App = (function() {
  function App() {
    this.jumpToMarker = __bind(this.jumpToMarker, this);
    this.map = j3r.Map.create();
    this.markers = j3r.Markers.create(this.map.getMap());
    this.markersController = j3r.MarkersController.create(this.markers);
    this.search = j3r.Search.create();
    this.markerInfo = $(j3r.conf['settings']['el_markerInfoPlaceholder']);
    return;
  }

  App.prototype.start = function() {
    var _this = this;
    this.map.init();
    this.markers.setMarkers(j3r.conf.markers);
    this.markersController.init();
    $(document).ready(function() {
      var searchInput;
      searchInput = $(j3r.conf['settings']['el_searchInput']);
      searchInput.keyup(function() {
        _this.search.search(searchInput.val());
      });
    });
  };

  App.prototype.select = function(mainCat, selectedCat) {
    this.markersController.setSelections(mainCat, selectedCat);
  };

  App.prototype.jumpToMarker = function(markerId) {
    var pos;
    $(j3r.conf['settings']['el_searchInput']).val('');
    this.search.search('');
    this.select('cat-a', 'cat-a');
    pos = new google.maps.LatLng(j3r.conf['markers'][markerId]['pos'][0], j3r.conf['markers'][markerId]['pos'][1]);
    this.map.getMap().setCenter(pos);
    this.map.getMap().setZoom(j3r.conf['settings']['mapZoomOnMarkerDetail']);
    this.markers.showMarkerInfo(markerId);
  };

  App.prototype.showInfoWindow = function(markerId) {
    var content;
    content = '<span onclick="$(\'' + j3r.conf['settings']['el_markerInfoPlaceholder'] + '\').hide()" class="marker-info-close"></span>';
    content += this.markersController.markers.infoWindows.generateInfoWindowContent(markerId);
    this.markerInfo.empty();
    this.markerInfo.append(content);
    setTimeout(function() {
      $(j3r.conf['settings']['el_markerInfoPlaceholderColorbox']).colorbox({
        rel: "gal"
      });
    }, 500);
    this.markerInfo.css('left', (($(window).width() - 960) / 2) + (960 - 308));
    $(j3r.conf['settings']['el_searchInput']).val('');
    this.search.search('');
    this.markerInfo.show();
  };

  return App;

})();

j3r.helpers = {
  categoryInfo: {},
  getAllCategoriesInfo: function(itemId) {
    var level, levelValues, output, _ref;
    if (j3r.helpers.categoryInfo[itemId] == null) {
      j3r.helpers.setCategoryInfo(itemId);
    }
    output = [];
    _ref = j3r.helpers['categoryInfo'][itemId];
    for (level in _ref) {
      levelValues = _ref[level];
      output = output.concat(levelValues);
    }
    return output;
  },
  getCategoryInfo: function(itemId, level, delimiter) {
    var output;
    if (level == null) {
      level = 1;
    }
    if (delimiter == null) {
      delimiter = ' ';
    }
    if (j3r.helpers.categoryInfo[itemId] == null) {
      j3r.helpers.setCategoryInfo(itemId);
    }
    output = '';
    if (j3r.helpers['categoryInfo'][itemId][level] != null) {
      output = j3r.helpers['categoryInfo'][itemId][level].join(delimiter);
    }
    return output;
  },
  setCategoryInfo: function(itemId) {
    var categories, category, end, level, selection;
    selection = j3r['conf']['markers'][itemId]['cat'];
    end = 0;
    categories = {};
    while (true) {
      end = selection.indexOf(j3r.conf['settings']['catPrefix'], 1);
      if (end === -1 && selection.length > 0) {
        end = selection.length;
      }
      if (end > -1) {
        category = selection.substring(0, end);
        level = j3r.helpers.countOccurences(category, '_');
        if (categories[level] == null) {
          categories[level] = [];
        }
        categories[level].push(j3r.helpers.getCategoryName(category, j3r['conf']['categories']['list']));
        selection = selection.substring(end);
      } else {
        break;
      }
    }
    j3r.helpers['categoryInfo'][itemId] = categories;
  },
  getCategoryName: function(cat, list) {
    var key, title;
    if ((list[cat] != null) && typeof list[cat] !== 'object') {
      return list[cat];
    }
    for (key in list) {
      if ((cat.indexOf(key) === 0) && (j3r.helpers.countOccurences(cat.substring(key.length), '_') === 1)) {
        title = j3r.helpers.getCategoryName(cat, list[key]);
        return title;
      }
    }
  },
  countOccurences: function(str, find) {
    var regex;
    regex = new RegExp(find, "g");
    return str.length - str.replace(regex, "").length;
  },
  getTransformedText: function(text, useSpaces) {
    var pos, toReplace, _i, _ref;
    if (useSpaces == null) {
      useSpaces = true;
    }
    text = text.toLowerCase();
    if (!useSpaces) {
      text = text.replace(/\s/g, "");
    }
    toReplace = {
      'á': 'a',
      'ä': 'a',
      'č': 'c',
      'ď': 'd',
      'é': 'e',
      'ě': 'e',
      'í': 'i',
      'ĺ': 'l',
      'ľ': 'l',
      'ň': 'n',
      'ó': 'o',
      'ô': 'o',
      'ő': 'o',
      'ö': 'o',
      'ŕ': 'r',
      'š': 's',
      'ť': 't',
      'ú': 'u',
      'ů': 'u',
      'ű': 'u',
      'ü': 'u',
      'ý': 'y',
      'ř': 'r',
      'ž': 'z'
    };
    for (pos = _i = 0, _ref = text.length; 0 <= _ref ? _i < _ref : _i > _ref; pos = 0 <= _ref ? ++_i : --_i) {
      if (toReplace[text[pos]] == null) {
        text[pos] = toReplace[text[pos]];
      }
    }
    return text;
  }
};
