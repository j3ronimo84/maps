// Generated by CoffeeScript 1.6.3
var j3r;

j3r = {};

j3r.App = (function() {
  function App() {
    this.map = j3r.Map.create();
    this.markers = j3r.Markers.create(this.map.getMap());
    this.markersController = j3r.MarkersController.create(this.markers);
    return;
  }

  App.prototype.start = function() {
    this.map.init();
    this.markers.setMarkers(j3r.conf.markers);
    this.markersController.init();
  };

  App.prototype.select = function(mainCat, selectedCat) {
    this.markersController.setSelections(mainCat, selectedCat);
  };

  return App;

})();

j3r.helpers = {
  getCategoryPath: function(selection) {
    var path, pos, start;
    path = [];
    start = 0;
    pos = (function() {
      var _results;
      _results = [];
      while (selection.indexOf('_', start) !== -1) {
        path.push(selection.substring(0, pos));
        _results.push(start = pos);
      }
      return _results;
    })();
    return path;
  },
  countOccurences: function(string, count) {
    var line;
    line = clone(string);
    return line.length() - line.replace(count, "").length();
  }
};

j3r.Observer = (function() {
  Observer.prototype.debugMode = false;

  function Observer() {
    this.subscribers = {};
    if (window["anev"] != null) {
      this.debugMode = window["anev"].debugMode;
    }
  }

  Observer.prototype.on = function(type, fn, context) {
    if (typeof fn !== "function") {
      if (typeof context[fn] === "function") {
        fn = context[fn];
      } else {
        throw new Error("None of variables " + fn + ", " + context[fn] + " are functions");
      }
    }
    if (typeof this.subscribers[type] === "undefined") {
      this.subscribers[type] = [];
    }
    return this.subscribers[type].push({
      fn: fn,
      context: context || this
    });
  };

  Observer.prototype.fire = function(type) {
    var args, key, method, _i, _len, _ref, _results;
    args = [].slice.call(arguments, 1);
    if (this.debugMode) {
      console.log("fire " + type, args, this);
    }
    if (this.subscribers[type] != null) {
      _ref = this.subscribers[type];
      _results = [];
      for (key = _i = 0, _len = _ref.length; _i < _len; key = ++_i) {
        method = _ref[key];
        _results.push((function(key, method) {
          return method.fn.apply(method.context, args);
        })(key, method));
      }
      return _results;
    }
  };

  Observer.prototype.remove = function(type, fn, context) {
    var key, method, _i, _len, _ref, _results;
    _ref = this.subscribers[type];
    _results = [];
    for (key = _i = 0, _len = _ref.length; _i < _len; key = ++_i) {
      method = _ref[key];
      if (method.fn === fn && method.context === context) {
        _results.push((function(key, method) {
          return this.subscribers[type].splice(key, 1);
        })(key, method));
      }
    }
    return _results;
  };

  Observer.prototype.listen = function(object, type, fn) {
    if (this.debugMode) {
      return console.log("listening " + type, object);
    }
  };

  return Observer;

})();
